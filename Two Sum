Given an array of integers, find two numbers such that they add up to a specific target
 number.

 The function twoSum should return indices of the two numbers such that they add
 upto the target, where index1 must be less than index2. Please note that your returned
 answers (both index1 and index2) are not zero-based


We will solve this problem with tow wya:
1 - Naive Approch ,
2 - Using HashMap,

Naive Approch
For example:
 Input: numbers={2, 7, 11, 15}, target=9
 Output: index1=1, index2=2;


 This problem is pretty straightforward. We can simply examine every possible pair of
 numbers in this integer array.
 Time complexity in worst case: O(nË† 2).

public static int[] towSum(int[] numbers,int target){
      int[] result =new int[2];
      for(int i =0;i<numbers.length;i++){
        for(int j=i+1;j<number.lenght;j++){
            if(number[i] +number[j]==target){
                //the index of the result should  not to be zero based
                result[0]=i+1;
                result[1]=j+1;
            }
        }
      }

return result;
}


2. //HashMap Method to sote the target value ,this is better solution 

public static int[] twoSum(int[] arr,int target){

     HashMap<Integer,Integer> map = new HashMap<Integer,Integer>();
     int[] result = new int[2];
    for(int i=0;i<arr.length;i++){
      if(map.containKey(arr[i])){
        int index = map.get(arr[i]);
        result[0] =index+1;
        result[0] = i+1;
    break;
   else
    map.put(target-arr[i],i);
        
      }
    }
return result;
}

//Time complexity of this solution O(n);
//The time complexity is depends on the put and get operation of HashMap which  normally O(1);

