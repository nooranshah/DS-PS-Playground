Problem 1:Rotate and array
Details:
Rotate an array n element to the right by k steps.for instance with n =7; k =3;the array =  [1,2,3,4,5,6,7] is rotated  [5,6,7,1,2,3,4].
there is a 3 slution way to solve this problem;

1- Intermidiat array:
In a straightforward way,we can create a new array and then copy elements to the new array.Then change the orginal array by using System.arraycopy();

public void rotateArray(int[] nums,int k){
  if(k>nums.length)
    k=k%nums.length;

  int[] result = new nums[nums.length];

  for(int i=0;i<k;i++){
    result[i] = nums[nums.length-k+i];
  }
  
  int j=0;
 for(int i=k; i<nums.length; i++)
 {
 result[i] = nums[j];
 j++;
 }
  System.arraycopy( result, 0, nums, 0, nums.length );
}

//result Space is O(n) and time is O(n).

2-Bubble Rotate=>the time complexity O(1) space;


public static void rotate(int[] arr,int order){
  if(arr==null || order<0){
    throw new IllegalArgomentException("illegal argument!");
  }
for(int i=0;i<order;i++){
  for(int j=arr.length-1;j>0;j--){
    int temp =arr[j];
    arr[j]=arr[j-1];
    arr[j-1]=temp;
  }
}

}
the time complexity is O(n*k);




